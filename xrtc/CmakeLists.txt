cmake_minimum_required(VERSION 3.8)

project(xrtc)
file(GLOB all_src
        ./*.cpp)
include_directories(
        ${XRTC_DIR}
        ${XRTC_THIRD_PARTY_DIR}/include

)


link_directories(
        ${XRTC_THIRD_PARTY_DIR}/lib
)
if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    add_definitions( -DXRTC_API_EXPORT -DWEBRTC_WIN -DNOMINMAX -DCURL_STATICLIB)
endif ()

add_library(xrtc SHARED ${all_src} base/xrtc_global.cpp device/cam_impl.cpp device/cam_impl.h media/base/media_frame.h media/base/media_frame.h media/base/media_chain.cpp media/base/media_chain.h media/chain/xrtc_preview.cpp media/chain/xrtc_preview.h device/xrtc_render.h media/source/xrtc_video_source.cpp media/source/xrtc_video_source.h media/sink/d3d9_render_sink.cpp media/sink/d3d9_render_sink.h media/base/base_pin.cpp media/base/base_pin.h media/base/in_pin.cpp media/base/in_pin.h media/base/out_pin.h media/base/out_pin.cpp base/xrtc_json.cpp media/base/xrtc_pusher.cpp media/base/xrtc_pusher.h media/chain/xrtc_push_stream.cpp media/chain/xrtc_push_stream.h media/filter/x264_encoder_filter.cpp media/filter/x264_encoder_filter.h media/sink/xrtc_media_sink.cpp media/sink/xrtc_media_sink.h base/xrtc_utils.cpp base/xrtc_utils.h base/xrtc_http.cpp rtc/pc/peer_connection.cpp rtc/pc/peer_connection.h rtc/pc/session_description.cpp rtc/pc/session_description.h rtc/pc/transport_controller.cpp rtc/pc/transport_controller.h rtc/pc/code_info.h rtc/pc/stream_params.h rtc/pc/peer_connection_def.h rtc/modules/rtp_rtcp/rtp_format.cpp rtc/modules/rtp_rtcp/rtp_format.h rtc/modules/rtp_rtcp/rtp_format.h rtc/modules/rtp_rtcp/rtp_format_h264.cpp rtc/modules/rtp_rtcp/rtp_format_h264.h rtc/modules/rtp_rtcp/rtp_packet.cpp rtc/modules/rtp_rtcp/rtp_packet.h rtc/modules/rtp_rtcp/rtp_packet.h rtc/modules/rtp_rtcp/rtp_packet_to_send.cpp rtc/modules/rtp_rtcp/rtp_packet_to_send.h rtc/modules/rtp_rtcp/rtp_packet_to_send.h rtc/video/video_send_stream.cpp rtc/video/video_send_stream.h
        rtc/video/video_send_stream_config.h rtc/modules/rtp_rtcp/rtp_rtcp_impl.cpp rtc/modules/rtp_rtcp/rtp_rtcp_impl.h rtc/modules/rtp_rtcp/rtp_rtcp_interface.h rtc/modules/rtp_rtcp/rtp_rtcp_defines.cpp rtc/modules/rtp_rtcp/rtp_rtcp_defines.h rtc/modules/rtp_rtcp/rtcp_sender.cpp rtc/modules/rtp_rtcp/rtcp_sender.h rtc/modules/rtp_rtcp/rtcp_packet.cpp rtc/modules/rtp_rtcp/rtcp_packet.h rtc/modules/rtp_rtcp/rtcp_packet/sender_report.cpp rtc/modules/rtp_rtcp/rtcp_packet/sender_report.h rtc/modules/rtp_rtcp/rtcp_packet/report_block.cpp rtc/modules/rtp_rtcp/rtcp_packet/report_block.h rtc/modules/rtp_rtcp/rtp_utils.cpp rtc/modules/rtp_rtcp/rtp_utils.h rtc/modules/rtp_rtcp/rtcp_receiver.cpp rtc/modules/rtp_rtcp/rtcp_receiver.h rtc/modules/rtp_rtcp/rtcp_packet/common_header.cpp rtc/modules/rtp_rtcp/rtcp_packet/common_header.h rtc/modules/rtp_rtcp/rtcp_packet/receiver_report.cpp rtc/modules/rtp_rtcp/rtcp_packet/receiver_report.h rtc/modules/rtp_rtcp/rtcp_packet/rtpfb.cpp rtc/modules/rtp_rtcp/rtcp_packet/rtpfb.h rtc/modules/rtp_rtcp/rtcp_packet/nack.cpp rtc/modules/rtp_rtcp/rtcp_packet/nack.h device/mic_impl.cpp device/mic_impl.h media/source/xrtc_audio_source.cpp media/source/xrtc_audio_source.h media/filter/audio_processing_filter.cpp media/filter/audio_processing_filter.h media/filter/opus_encoder_filter.cpp media/filter/opus_encoder_filter.h rtc/audio/audio_send_stream_config.h rtc/audio/audio_send_stream.cpp rtc/audio/audio_send_stream.h rtc/pc/rtp_transport_controller_send.cpp rtc/pc/rtp_transport_controller_send.h rtc/modules/pacing/task_queue_paced_sender.cpp rtc/modules/pacing/task_queue_paced_sender.h rtc/modules/pacing/pacing_controller.cpp rtc/modules/pacing/pacing_controller.h rtc/modules/pacing/round_robin_packet_queue.cpp rtc/modules/pacing/round_robin_packet_queue.h rtc/modules/pacing/interval_budget.cpp rtc/modules/pacing/interval_budget.h
        rtc/modules/rtp_rtcp/rtp_header_extensions.cpp
        rtc/modules/rtp_rtcp/rtp_header_extension_map.cpp
        rtc/modules/rtp_rtcp/rtcp_packet/transport_feedback.h
        rtc/modules/rtp_rtcp/rtcp_packet/transport_feedback.cpp
        rtc/modules/congestion_controller/goog_cc/goog_cc_network_controller.h
        rtc/modules/congestion_controller/goog_cc/goog_cc_network_controller.cpp
        rtc/modules/congestion_controller/rtp/transport_feedback_adapter.cpp
        rtc/modules/congestion_controller/goog_cc/delay_based_bwe.cpp)
#add_library(xrtc STATIC ${all_src} base/xrtc_global.cpp)

target_link_libraries(xrtc
        absl_bad_optional_access
        absl_throw_delegate
        absl_strings
        absl_bad_variant_access
        winmm
        ws2_32
        Strmiids
        jpeg-static
        yuv
        jsoncpp_static
        d3d9
        libx264
        opus
        libwebrtc
        wldap32
        Crypt32
        msdmo
        dmoguids
        wmcodecdspuuid
        iphlpapi
        libssl
        libcrypto
        libcurl
        libice
        )








